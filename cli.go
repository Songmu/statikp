package statikp

import (
	"bytes"
	"flag"
	"fmt"
	"io"
	"log"
	"os"
	"path"
	"path/filepath"
	"strings"
	"time"

	"github.com/natefinch/atomic"
)

type cli struct {
	src, dest                     string
	noMtime, noCompress, dotfiles bool
	tags, pkg, pkgCmt             string
}

func newCli() *cli {
	return &cli{}
}

func Run(argv []string, outStream, errStream io.Writer) error {
	log.SetOutput(errStream)
	log.SetPrefix("[statikp] ")
	fs := flag.NewFlagSet(
		fmt.Sprintf("statikp (v%s rev:%s)", version, revision), flag.ContinueOnError)
	fs.SetOutput(errStream)
	cl := newCli()

	fs.StringVar(&cl.src, "src", path.Join(".", "public"), "The path of the source directory.")
	fs.StringVar(&cl.dest, "dest", ".", "The destination path of the generated package.")
	fs.StringVar(&cl.pkg, "p", "statik", "Name of the generated package")
	fs.BoolVar(&cl.noMtime, "m", false, "Ignore modification times on files.")
	fs.BoolVar(&cl.noCompress, "Z", false, "Do not use compression to shrink the files.")
	fs.StringVar(&cl.tags, "tags", "", "Write build constraint tags")
	fs.StringVar(&cl.pkgCmt, "c", "Package statik contains static assets.", "The package comment. An empty value disables this comment.\n")
	fs.BoolVar(&cl.dotfiles, "dotfiles", false, "Collect dotfiles inside source or not.")

	if err := fs.Parse(argv); err != nil {
		return err
	}
	return cl.run(fs.Args())
}

// mtimeDate holds the arbitrary mtime that we assign to files when
// flagNoMtime is set.
var mtimeDate = time.Date(2000, time.January, 1, 0, 0, 0, 0, time.UTC)

func (cl *cli) run(argv []string) error {
	dest := filepath.Join(cl.dest, cl.pkg, "statik.go")
	err := os.MkdirAll(filepath.Dir(dest), 0755)
	if err != nil {
		return err
	}
	return cl.generateSource(dest)
}

// Walks on the source path and generates source code
// that contains source directory's contents as zip contents.
// Generates source registers generated zip contents data to
// be read by the statik/fs HTTP file system.
func (cl *cli) generateSource(dest string) error {
	var opts []Option
	if cl.noCompress {
		opts = append(opts, Compress(false))
	}
	if cl.noMtime {
		opts = append(opts, FixMtime(mtimeDate))
	}
	if cl.dotfiles {
		opts = append(opts, IncludeDotFiles(true))
	}
	bs, err := Zip(cl.src, opts...)
	if err != nil {
		return err
	}

	var tags string
	if cl.tags != "" {
		tags = "\n// +build " + cl.tags + "\n"
	}

	var comment string
	if cl.pkgCmt != "" {
		comment = "\n" + commentLines(cl.pkgCmt)
	}

	buf := &bytes.Buffer{}
	fmt.Fprintf(buf, `// Code generated by statik. DO NOT EDIT.
%s%s
package %s

import (
	"github.com/rakyll/statik/fs"
)

func init() {
	data := "`, tags, comment, cl.pkg)
	FprintZipData(buf, bs)
	fmt.Fprint(buf, `"
	fs.Register(data)
}
`)
	return atomic.WriteFile(dest, buf)
}

// comment lines prefixes each line in lines with "// ".
func commentLines(lines string) string {
	lines = "// " + strings.Replace(lines, "\n", "\n// ", -1)
	return lines
}
